{"version":3,"sources":["components/navigation/facerecognition.png","components/navigation/Navigation.js","components/navigation/Logo.js","components/navigation/ImageLinkForm.js","components/navigation/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","style","display","justifyContent","Logo","options","max","height","width","alt","src","facerecognition","ImageLinkForm","type","Rank","params","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,6C,4PCW5BC,EATI,WACf,OACI,yBAAKC,UAAU,MAAMC,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC1D,uBAAGH,UAAU,2CAAb,c,wCCUGI,EAVF,WACT,OACI,yBAAKJ,UAAU,gBACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBK,QAAS,CAAEC,IAAM,IAAML,MAAO,CAAEM,OAAQ,IAAKC,MAAO,MACpF,yBAAKR,UAAU,kBAAiB,yBAAKS,IAAI,mBAAmBC,IAAKC,MAAjE,QCUDC,G,MAhBO,WAClB,OACI,6BACI,uBAAGZ,UAAU,MACR,yEAEL,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,qBAAqBa,KAAK,SAC3C,4BAAQb,UAAU,yDAAlB,eCGLc,EAbF,WACT,OACI,6BACI,yBAAKd,UAAU,QACV,iCAEL,yBAAKA,UAAU,QACV,QCDXe,EAAO,CACX,UAAa,CACT,OAAU,CACN,MAAS,IAEb,KAAQ,CACJ,MAAS,IAGjB,cAAiB,CACb,OAAU,CACN,QAAW,CACP,QAAU,EACV,KAAQ,cAoBPC,E,iLAZX,OACE,yBAAKhB,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAYe,OAAQA,IACzC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARUE,aCfEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f4ccd7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facerecognition.24b38449.png\";","import React from 'react';\n\nconst Navigation = () => {\n    return(\n        <nav className='nav' style={{display: 'flex', justifyContent: 'flex-end'}}>\n            <p className='f4 link dim black underline pa3 pointer'>Sign Out</p>\n        </nav>\n    )\n}\n\n\nexport default Navigation;","import React from 'react';\nimport Tilt from 'react-tilt'\nimport './Logo.css'\nimport facerecognition from './facerecognition.png'\n\nconst Logo = () => {\n    return(\n        <div className='logo ma4 mt0'>\n            <Tilt className=\"Tilt br2 shadow-3\" options={{ max : 40 }} style={{ height: 125, width: 125 }} >\n                <div className=\"Tilt-inner pa2\"><img alt='face-recognition' src={facerecognition}/> </div>\n            </Tilt>\n        </div>\n    )\n}\n\nexport default Logo;","import React from 'react'\nimport './ImageLinkForm.css'\n\nconst ImageLinkForm = () => {\n    return (\n        <div>\n            <p className='f3'>\n                {'This application will detect faces in your pictures. Give it a try :)'}\n            </p>\n            <div className=\"center\">\n                <div className='form center pa4 br3 shadow-5'>\n                    <input className='f4 pa2 w-70 center' type='text' />\n                    <button className='w-30 br2 grow f3 b link pv2 white dib bg-light-purple'>Detect</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm","import React from 'react'\n\nconst Rank = () => {\n    return (\n        <div>\n            <div className='b f3'>\n                {'Andrei, your current rank is:'}\n            </div>\n            <div className='b f2'>\n                {'#5'}\n            </div>\n        </div>\n    )\n}\n\nexport default Rank;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/navigation/Navigation';\nimport Logo from './components/navigation/Logo';\nimport ImageLinkForm from './components/navigation/ImageLinkForm';\nimport Rank from './components/navigation/Rank';\n\nconst params={\n  \"particles\": {\n      \"number\": {\n          \"value\": 75\n      },\n      \"size\": {\n          \"value\": 5\n      }\n  },\n  \"interactivity\": {\n      \"events\": {\n          \"onhover\": {\n              \"enable\": true,\n              \"mode\": \"repulse\"\n          }\n      }\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={params}/>\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport 'react-tilt';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}