{"version":3,"sources":["components/Logo/facerecognition.png","components/navigation/Navigation.js","components/facerecognition/FaceRecognition.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/SignIn/SignIn.js","components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","onRouteChange","isSignedIn","className","style","display","justifyContent","onClick","faceRecognition","imageurl","box","id","alt","src","width","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Logo","options","max","height","facerecognition","ImageLinkForm","onInputChange","onSubmit","onChange","placeholder","type","Rank","SignIn","htmlFor","name","value","Register","app","Clarifai","App","apiKey","params","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFacebox","setState","event","input","target","route","state","models","predict","FACE_DETECT_MODEL","then","response","catch","error","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,6C,mTCyB5BC,EAvBI,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAEhC,OACI,6BACMA,EAEE,yBAAKC,UAAU,MAAMC,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC1D,uBAAGC,QAAS,WAAON,EAAc,YAAaE,UAAU,2CAAxD,aAKJ,yBAAKA,UAAU,MAAMC,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC1D,uBAAGC,QAAS,WAAON,EAAc,WAAYE,UAAU,2CAAvD,WACA,uBAAGI,QAAS,WAAON,EAAc,aAAcE,UAAU,2CAAzD,eCFLK,G,MAXS,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,IAChC,OACI,yBAAKP,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKQ,GAAG,aAAaC,IAAI,GAAGC,IAAKJ,EAAUK,MAAQ,QAAQC,MAAQ,SACnE,yBAAKZ,UAAU,eAAeC,MAAO,CAACY,IAAKN,EAAIO,OAAQC,MAAOR,EAAIS,SAAUC,OAAQV,EAAIW,UAAWC,KAAMZ,EAAIa,e,0CCO9GC,EAVF,WACT,OACI,yBAAKrB,UAAU,gBACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBsB,QAAS,CAAEC,IAAM,IAAMtB,MAAO,CAAEuB,OAAQ,IAAKb,MAAO,MACpF,yBAAKX,UAAU,kBAAiB,yBAAKS,IAAI,mBAAmBC,IAAKe,MAAjE,QCUDC,G,MAhBO,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,SACnC,OACI,6BACI,uBAAG5B,UAAU,MACR,yEAEL,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BAAO6B,SAAUF,EAAe3B,UAAU,qBAAqB8B,YAAY,uBAAuBC,KAAK,SACvG,4BAAQ3B,QAASwB,EAAU5B,UAAU,6DAArC,eCGLgC,EAbF,WACT,OACI,6BACI,yBAAKhC,UAAU,QACV,iCAEL,yBAAKA,UAAU,QACV,QCqBFiC,EA5BA,SAAC,GAAqB,IAApBnC,EAAmB,EAAnBA,cACb,OACI,6BAASE,UAAU,kEACf,0BAAMA,UAAU,gBACZ,yBAAKA,UAAU,WACX,8BAAUQ,GAAG,UAAUR,UAAU,6BAC7B,4BAAQA,UAAU,kBAAlB,WACA,yBAAKA,UAAU,OACX,2BAAOA,UAAU,oBAAoBkC,QAAQ,iBAA7C,SACA,2BAAOlC,UAAU,qEAAqE+B,KAAK,QAAQI,KAAK,gBAAiB3B,GAAG,mBAEhI,yBAAKR,UAAU,OACX,2BAAOA,UAAU,oBAAoBkC,QAAQ,YAA7C,YACA,2BAAOlC,UAAU,uEAAuE+B,KAAK,WAAWI,KAAK,WAAY3B,GAAG,eAGpI,yBAAKR,UAAU,IACX,2BAAOI,QAAS,WAAON,EAAc,SAAUE,UAAU,uEAAuE+B,KAAK,SAASK,MAAM,aAExJ,yBAAKpC,UAAU,eACX,uBAAGI,QAAS,WAAON,EAAc,aAAcE,UAAU,wBAAzD,iBCSTqC,EA7BE,SAAC,GAAqB,IAApBvC,EAAmB,EAAnBA,cACf,OACI,6BAASE,UAAU,kEACf,0BAAMA,UAAU,gBACZ,yBAAKA,UAAU,WACX,8BAAUQ,GAAG,UAAUR,UAAU,6BAC7B,4BAAQA,UAAU,kBAAlB,YACA,yBAAKA,UAAU,OACX,2BAAOA,UAAU,oBAAoBkC,QAAQ,QAA7C,QACA,2BAAOlC,UAAU,qEAAqE+B,KAAK,OAAOI,KAAK,OAAQ3B,GAAG,UAEtH,yBAAKR,UAAU,OACX,2BAAOA,UAAU,oBAAoBkC,QAAQ,iBAA7C,SACA,2BAAOlC,UAAU,qEAAqE+B,KAAK,OAAOI,KAAK,gBAAiB3B,GAAG,mBAE/H,yBAAKR,UAAU,OACX,2BAAOA,UAAU,oBAAoBkC,QAAQ,YAA7C,YACA,2BAAOlC,UAAU,uEAAuE+B,KAAK,WAAWI,KAAK,WAAY3B,GAAG,eAGpI,yBAAKR,UAAU,IACX,2BAAOI,QAAS,WAAON,EAAc,WAAYE,UAAU,uEAAuE+B,KAAK,SAASK,MAAM,kBCPxKE,EAAM,IAAIC,IAASC,IAAI,CAC5BC,OAAQ,qCAIHC,EAAO,CACX,UAAa,CACT,OAAU,CACN,MAAS,IAEb,KAAQ,CACJ,MAAS,IAGjB,cAAiB,CACb,OAAU,CACN,QAAW,CACP,QAAU,EACV,KAAQ,cAkGPF,E,YA3Fb,aAAc,IAAD,8BACX,+CAWFG,sBAAwB,SAACC,GACvB,IAAMC,EAAeD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aAG3DC,EAAQC,SAASC,eAAe,cAChCzC,EAAQ0C,OAAOH,EAAMvC,OACrBa,EAAS6B,OAAOH,EAAM1B,QAE5B,MAAO,CACLJ,QAASyB,EAAaS,SAAW3C,EACjCG,OAAQ+B,EAAaU,QAAU/B,EAC/BR,SAAUL,EAASkC,EAAaW,UAAY7C,EAC5CO,UAAWM,EAAUqB,EAAaY,WAAajC,IAxBtC,EA6BfkC,eAAiB,SAACnD,GAChB,EAAKoD,SAAS,CACZpD,IAAKA,KA/BM,EAoCfoB,cAAgB,SAACiC,GACf,EAAKD,SAAS,CACZE,MAAOD,EAAME,OAAO1B,SAtCT,EA0CftC,cAAgB,SAACiE,GACF,YAAVA,EACD,EAAKJ,SAAS,CACZ5D,YAAY,IAGE,SAAVgE,GACN,EAAKJ,SAAS,CACZ5D,YAAY,IAGhB,EAAK4D,SAAS,CACZI,MAAOA,KAtDI,EA2DfnC,SAAW,WACT,EAAK+B,SAAS,CAACrD,SAAU,EAAK0D,MAAMH,QACpCvB,EAAI2B,OACDC,QACC3B,IAAS4B,kBACT,EAAKH,MAAMH,OACRO,MAAK,SAAAC,GAAQ,OAAI,EAAKX,eAAe,EAAKf,sBAAsB0B,OAChEC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,8BAA+BF,OAhE/D,EAAKP,MAAQ,CACXH,MAAO,GACPvD,SAAU,GACVC,IAAK,GACLwD,MAAO,SACPhE,YAAY,GAPH,E,sEAsEX,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAY0C,OAAQA,IACzC,kBAAC,EAAD,CAAY3C,WAAa2E,KAAKV,MAAMjE,WAAYD,cAAe4E,KAAK5E,gBACpE,kBAAC,EAAD,MACuB,SAArB4E,KAAKV,MAAMD,MACX,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAenC,SAAY8C,KAAK9C,SAAUD,cAAiB+C,KAAK/C,gBAChE,kBAAC,EAAD,CAAiBpB,IAAOmE,KAAKV,MAAMzD,IAAKD,SAAYoE,KAAKV,MAAM1D,YAEzC,WAArBoE,KAAKV,MAAMD,MACZ,kBAAC,EAAD,CAAQjE,cAAe4E,KAAK5E,gBAE5B,kBAAC,EAAD,CAAUA,cAAe4E,KAAK5E,qB,GArFxB6E,aC5BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiB,c","file":"static/js/main.34c00148.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facerecognition.24b38449.png\";","import React from 'react';\n\nconst Navigation = ({onRouteChange, isSignedIn}) => {\n\n    return(\n        <div>\n            {(isSignedIn) ?\n                (\n                <nav className='nav' style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    <p onClick={() => {onRouteChange('signout')}} className='f4 link dim black underline pa3 pointer'>Sign Out</p>\n                </nav>\n                )\n            :\n                (\n                <nav className='nav' style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    <p onClick={() => {onRouteChange('signin')}} className='f4 link dim black underline pa3 pointer'>Sign In</p>\n                    <p onClick={() => {onRouteChange('register')}} className='f4 link dim black underline pa3 pointer'>Register</p>\n                </nav>\n                )\n        }\n        </div>\n\n    )\n}\n\nexport default Navigation;","import React from 'react'\nimport './FaceRecognition.css'\n\nconst faceRecognition = ({imageurl, box}) => {\n    return (\n        <div className='center ma'>\n            <div className='absolute mt2'>\n                <img id='inputimage' alt='' src={imageurl} width = '500px' heigh = 'auto' />\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default faceRecognition;","import React from 'react';\nimport Tilt from 'react-tilt'\nimport './Logo.css'\nimport facerecognition from './facerecognition.png'\n\nconst Logo = () => {\n    return(\n        <div className='logo ma4 mt0'>\n            <Tilt className=\"Tilt br2 shadow-3\" options={{ max : 40 }} style={{ height: 125, width: 125 }} >\n                <div className=\"Tilt-inner pa2\"><img alt='face-recognition' src={facerecognition}/> </div>\n            </Tilt>\n        </div>\n    )\n}\n\nexport default Logo;","import React from 'react'\nimport './ImageLinkForm.css'\n\nconst ImageLinkForm = ({onInputChange, onSubmit}) => {\n    return (\n        <div>\n            <p className='f3'>\n                {'This application will detect faces in your pictures. Give it a try :)'}\n            </p>\n            <div className=\"center\">\n                <div className='form center pa4 br3 shadow-5'>\n                    <input onChange={onInputChange} className='f4 pa2 w-70 center' placeholder='Enter the image url.' type='text' />\n                    <button onClick={onSubmit} className='w-30 br2 grow f4 b link ph3 pv2 white dib bg-light-purple'>Detect</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm","import React from 'react'\n\nconst Rank = () => {\n    return (\n        <div>\n            <div className='b f3'>\n                {'Andrei, your current rank is:'}\n            </div>\n            <div className='b f2'>\n                {'#5'}\n            </div>\n        </div>\n    )\n}\n\nexport default Rank;\n","import React from 'react'\n\nconst SignIn = ({onRouteChange}) => {\n    return (\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\n            <main className=\"pa4 black-80\">\n                <div className=\"measure\">\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n                        <legend className=\"f2 fw6 ph0 mh0\">Sign In</legend>\n                        <div className=\"mt3\">\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\"/>\n                        </div>\n                        <div className=\"mv3\">\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n                            <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n                        </div>\n                    </fieldset>\n                    <div className=\"\">\n                        <input onClick={() => {onRouteChange('home')}} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign in\"/>\n                    </div>\n                    <div className=\"lh-copy mt3\">\n                        <p onClick={() => {onRouteChange('register')}} className=\"f6 link dim black db\">Register</p>\n                    </div>\n                </div>\n            </main>\n        </article>\n    )\n}\n\nexport default SignIn;","import React from 'react'\n\nconst Register = ({onRouteChange}) => {\n    return (\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\n            <main className=\"pa4 black-80\">\n                <div className=\"measure\">\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n                        <legend className=\"f2 fw6 ph0 mh0\">Register</legend>\n                        <div className=\"mt3\">\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\"  id=\"name\"/>\n                        </div>\n                        <div className=\"mt3\">\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"email-address\"  id=\"email-address\"/>\n                        </div>\n                        <div className=\"mv3\">\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n                            <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n                        </div>\n                    </fieldset>\n                    <div className=\"\">\n                        <input onClick={() => {onRouteChange('signin')}} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Register\"/>\n                    </div>\n                </div>\n            </main>\n        </article>\n    )\n}\n\nexport default Register;","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/navigation/Navigation';\nimport FaceRecognition from './components/facerecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\n\n\n\n// initialize with your api key. This will also work in your browser via http://browserify.org/\n//initialized the face detection API with the apiKey\nconst app = new Clarifai.App({\n apiKey: '00513f0e128947d585f3d6e09d54598a'\n});\n\n//Declared the parameter for the dynamic background\nconst params={\n  \"particles\": {\n      \"number\": {\n          \"value\": 75\n      },\n      \"size\": {\n          \"value\": 5\n      }\n  },\n  \"interactivity\": {\n      \"events\": {\n          \"onhover\": {\n              \"enable\": true,\n              \"mode\": \"repulse\"\n          }\n      }\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      input: '',\n      imageurl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false\n    }\n  }\n\n  //calculate the face detection box for the image. data is the response from the api\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n     //const clarifaiFace = data.outputs[0].data.regions.map(faces => faces.region_info.bounding_box);\n    // console.log(clarifaiFace)\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n//set the state with the calculated face detection box\ndisplayFacebox = (box) => {\n  this.setState({\n    box: box\n  });\n}\n\n//Receive the input from the url textbox\nonInputChange = (event) => {\n  this.setState({\n    input: event.target.value\n  });\n}\n\nonRouteChange = (route) => {\n  if(route === 'signout'){\n    this.setState({\n      isSignedIn: false\n    })\n  }\n  else if(route === 'home'){\n    this.setState({\n      isSignedIn: true\n    })\n  }\n  this.setState({\n    route: route\n  })\n}\n\n//Fetch the data from the API, calculate the detection box on the image and set the state of the box\nonSubmit = () => {\n  this.setState({imageurl: this.state.input});\n  app.models\n    .predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input)\n        .then(response => this.displayFacebox(this.calculateFaceLocation(response)))\n        .catch(error => console.log('Error with the CLarifai API', error));\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={params}/>\n        <Navigation isSignedIn ={this.state.isSignedIn} onRouteChange={this.onRouteChange}/>\n        <Logo />\n        { this.state.route === 'home' ?\n          <div>\n            <Rank />\n            <ImageLinkForm onSubmit = {this.onSubmit} onInputChange = {this.onInputChange}/>\n            <FaceRecognition box = {this.state.box} imageurl = {this.state.imageurl}/>\n          </div>\n          : (this.state.route === 'signin') ? \n            <SignIn onRouteChange={this.onRouteChange}/>\n          :\n            <Register onRouteChange={this.onRouteChange}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport 'react-tilt';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}